This document is aimed primarily at developers of caide or of applications that use it.
It describes functions implemented by caide core.
If caide is used as a library/utility by an IDE, some of these functions
might be implemented by the IDE instead.


1. Parsing problem statement.
  Input: Some kind of problem ID (URL and possibly something else)
  Output:
    a) Problem name
    b) Class name / problem ID (for code generation)
    c) Test cases: each test case is a pair of files caseName.in/caseName.out
    d) Maybe memory and time limits
> caide problem <id>

2. Generation of code scaffold.
  Input:
    * Class name / problem ID from item 1b)
    * Target programming language / template file in this language
  Output:
    * scaffold of problem solution
    * test program in the programming language (goes over test cases one by one
  and checks the results; can be used for debugging in the IDE)
> caide lang <lang>

3. Creating or updating test list.
  Input:
    * Test cases from item 1c)
    * Local configuration (like the list of cases failed at the previous run)
  Output:
    * testList.txt file containing description of test cases to be run in correct
  order (i. e. if some tests failed on the previous run, they come first in the list)
> caide update_tests or caide make

4. Compiling and running test program.
  This is most likely done by an IDE.
  It's essential that item 3 (updating tests) was run right before this step.
This can be implemented by an application (e.g. a hook in an IDE), or, as a
universal solution, test program generated in item 2 can do it by issuing a
system call to caide executable or a function call to caide library.
  Input:
    * (non-inlined) source code of test program from item 2
    * testList.txt file containing description of test cases to be run from item 3
  Output: for each test case that was run, either *.out file containing
program output on this case or *.failed file meaning that the program crashed.
> caide test

5. Generating test report.
  Input:
    * test cases from item 1c)
    * .out and .failed files from item 4
    * Maybe memory and time limits from item 1d)
  Output: a text report containing description of each failed test case.
> caide eval_tests or caide test

6. Inlining of library code.
  Input:
    * Problem solution from item 2
    * Library of prewritten code
  Output: a single file to be sent to a judging system.
> caide make

The following items are required only for sanity check: it may happen that due to
a bug in an inliner the resulting program doesn't compile or runs incorrectly;
in this case we don't want the user to send it to the judge.

7. Compilation of inlined program.
  Input: inlined code from item 6
  Output: compiled binary [may coincide with input for interpreted languages]
> caide test

8. Running the tests on the inlined program.
  Input:
    * Compiled binary from item 4
    * Test cases from item 1c)
    * Maybe memory and time limits from item 1d)
  Output: report for each test case
> caide test


Other commands:
> caide checkout <problem id> - make problem active (other commands will work on this problem)
> caide status - prints active problem id, language
> caide archive [<problem id>] - moves problem to archive
> caide restore <problem id> - restores problem from the archive
